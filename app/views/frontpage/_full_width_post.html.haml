- if post.image?
  - if post.image_width.to_i > 1200
    %figure.image= image_tag post.image.url.gsub(/development/, 'production')
  - else
    %figure.image= image_tag post.image.url
- elsif !post.photos.empty?
  %ul{:"data-orbit" => ""}
    - post.photos.each do |p|
      %li
        = image_tag p.filename.url
.container.has-text-centered
  %h2.title= link_to raw(post.title), post
  %medium.date
    %em= "posted " +  l(post.updated_at.to_date, :format => :long)
  .column.is-8.is-offset-2.has-text-justified

    - unless post.audiopodcasts.empty?
      - post.audiopodcasts.each do |podcast|
        .audiocontent
          %audio{src: podcast.url, style: "width: 100%; height: 100%", width: "100%", height: "100%"}
    %br{clear: :all}
    .content.readmore= raw post.body      
    - if post.extended
      = link_to 'Read more', post, :class => [:button, :tiny]
  - if post.videos.empty?
    = content_for :jquery do
      :plain
        $('.readmore').readmore({
          speed: 75,
          moreLink: '<a style="margin-top: 10px" class="button tiny" href="#">Read more</a>',
          lessLink: '<a class="button tiny" href="#">Close</a>',
          maxHeight: 600
          });
  - else

    - post.videos.each do |video|
      - if video.progressive_video
        %video{:controls => "", :poster => "#{video.url}/poster.jpg", :preload => "none"}
          %source{:src => "#{video.url}/index.m3u8", :type => "application/vnd.apple.mpegurl"}
          %source{:src => "#{video.url}/progressive.mp4", :type => "video/mp4; codecs=\"avc1.4d401f, mp4a.40.2\""}
      - else
        .videocontent
          %video{src: video.url, controls: "true", style: "width: 100%; height: 100%", height: "100%", width: "100%"}
- unless post.videos.empty? && post.audiopodcasts.empty?
  = content_for :jquery do
    :plain
      $('video,audio').mediaelementplayer({
                renderers: ['native_hls'], 
                defaultVideoWidth: "100%", alwaysShowHours: true,
                hls: {
                  debug: true
                },
                success: function(media, node, instance) {
                  // Use the conditional to detect if you are using `native_hls` renderer for that given media;
                  // otherwise, you don't need it
                  if (Hls !== undefined) {
                    media.addEventListener(Hls.Events.MEDIA_ATTACHED, function () {
                      // All the code when this event is reached...
                      console.log('Media attached!');
                    });

                    // Manifest file was parsed, invoke loading method
                    media.addEventListener(Hls.Events.MANIFEST_PARSED, function () {
                      // All the code when this event is reached...
                      console.log('Manifest parsed!');

                    });

                    media.addEventListener(Hls.Events.FRAG_PARSING_METADATA, function (event, data) {
                      // All the code when this event is reached...
                      console.log(data);
                    });
                  }
                }});   

/
/ - if post.photos.empty?
/   .row
/     .small-2.columns &nbsp;
/     .small-8.columns.text-justify
/       = raw post.body
/       - if post.extended
/         = link_to 'Read more', post, :class => [:button, :tiny]
/     .small-2.columns &nbsp;
/
/ - elsif post.image?
/   = image_tag post.image.url(:wide)
/   .row
/     .small-6.columns
/
/       .row
/         .small-12.columns.text-justify
/
/ -else
/   .row
/     .small-6.columns.text-center
/       - if post.photos.size == 1
/         = image_tag post.photos.first.filename.url(:main)
/       - elsif post.photos.size > 1

/     .small-6.columns
/
/       .row
/         .small-12.columns.text-justify.readmore
/           = raw post.body
/           -#%p= raw Nokogiri::HTML.parse(post.body).css('p').first.text
/           - if post.extended
/             = link_to 'Read more', post, :class => [:button, :tiny]





